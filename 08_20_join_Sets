package com.javarush.task.task08.task0820;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.*;

/* Множество всех животных
1. Внутри класса Solution создать public static классы Cat, Dog без конструктора или с конструктором без параметров.
2. Реализовать метод createCats, который должен возвращать множество с 4 котами.
3. Реализовать метод createDogs, который должен возвращать множество с 3 собаками.
4. Реализовать метод join, который должен возвращать объединенное множество всех животных - всех котов и собак.
5. Реализовать метод removeCats, который должен удалять из множества pets всех котов, которые есть в множестве cats.
6. Реализовать метод printPets, который должен выводить на экран всех животных, которые в нем есть.
Каждое животное с новой строки.
*/

public class Solution {
    public static void main(String[] args) {
        Set<Cat> cats = createCats();
        Set<Dog> dogs = createDogs();

        Set<Object> pets = join(cats, dogs);
        printPets(pets);

       removeCats(pets, cats);
       printPets(pets);
    }
    //Реализовать метод createCats, который должен возвращать множество с 4 котами.
    public static Set<Cat> createCats() {
        Set<Cat> allCats = new HashSet<Cat>();
        Cat cat1 = new Cat();
        Cat cat2 = new Cat();
        Cat cat3 = new Cat();
        Cat cat4 = new Cat();

        allCats.add(cat1);
        allCats.add(cat2);
        allCats.add(cat3);
        allCats.add(cat4);

        return allCats;
    }

    //Реализовать метод createDogs, который должен возвращать множество с 3 собаками.
    public static Set<Dog> createDogs() {

        Set<Dog> allDogs = new HashSet<Dog>();
        Dog dog1 = new Dog();
        Dog dog2 = new Dog();
        Dog dog3 = new Dog();

        allDogs.add(dog1);
        allDogs.add(dog2);
        allDogs.add(dog3);

        return allDogs;
    }

    //Реализовать метод join, который должен возвращать объединенное множество всех животных - всех котов и собак.
    public static Set<Object> join(Set<Cat> cats, Set<Dog> dogs) {
        Set<Object> allPets = new HashSet<>();
        allPets.addAll(cats);
        allPets.addAll(dogs);

        return allPets;
    }

    //Реализовать метод removeCats, который должен удалять из множества pets всех котов, которые есть в множестве cats
    public static void removeCats(Set<Object> pets, Set<Cat> cats) {
        pets.removeAll(cats);
    }

    //Реализовать метод printPets, который должен выводить на экран всех животных, которые в нем есть.
    public static void printPets(Set<Object> pets) {
        Iterator<Object> iter = pets.iterator();
        while(iter.hasNext()){
            System.out.println(iter.next());
        }
    }

    //Внутри класса Solution создать public static классы Cat, Dog без конструктора или с конструктором без параметров.
    public static class Cat {
    }
    public static class Dog {
    }
}
